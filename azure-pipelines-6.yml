# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  name: Default  # Self-hosted agent

variables:
  projectPath: '**/Group16-COMP367Project.csproj'
  buildConfiguration: 'Release'

steps:
# ‚úÖ Step 1: Restore packages
- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    projects: '$(projectPath)'

# ‚úÖ Step 2: Build with Roslyn Analyzers
- task: DotNetCoreCLI@2
  displayName: 'Build Project with Roslyn Analyzers'
  inputs:
    command: 'build'
    projects: '$(projectPath)'
    arguments: '--configuration $(buildConfiguration) /p:ReportAnalyzer=true'

# ‚úÖ Step 3: Run Unit Tests and Generate Code Coverage (with correct results directory)
- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests with Code Coverage'
  inputs:
    command: 'test'
    projects: '$(projectPath)'
    arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" --logger trx --results-directory $(Build.SourcesDirectory)/TestResults'
    publishTestResults: true

# ‚úÖ Step 4: Show structure of TestResults folder (debug step)
- task: PowerShell@2
  displayName: 'DEBUG: List TestResults Folder'
  inputs:
    targetType: 'inline'
    script: |
      $resultsDir = "$(Build.SourcesDirectory)\TestResults"
      if (Test-Path $resultsDir) {
        Write-Host "`nüìÅ Contents of TestResults folder:"
        Get-ChildItem -Path $resultsDir -Recurse | Select-Object FullName
      } else {
        Write-Host "‚ùå TestResults folder not found!"
      }

# ‚úÖ Step 5: Copy coverage file to Downloads and print it to logs
- task: PowerShell@2
  displayName: 'Copy & Print Code Coverage File from Downloads Folder'
  inputs:
    targetType: 'inline'
    script: |
      $sourceFile = Get-ChildItem -Path "$(Build.SourcesDirectory)\TestResults" -Recurse -Filter "coverage.cobertura.xml" | Select-Object -First 1
      $downloadsPath = "$env:USERPROFILE\Downloads\coverage.cobertura.xml"

      if ($sourceFile) {
        Copy-Item -Path $sourceFile.FullName -Destination $downloadsPath -Force
        Write-Host "‚úÖ Copied to Downloads: $downloadsPath"

        Write-Host "`n==================== üìä CODE COVERAGE REPORT (FROM DOWNLOADS) ===================="
        Get-Content $downloadsPath
        Write-Host "`n==================================================================================="
      } else {
        Write-Host "‚ùå coverage.cobertura.xml not found in TestResults folder."
      }
